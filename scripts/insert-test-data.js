require('dotenv').config();
const { executeQuery, executeTransaction } = require('../config/database');
const { v4: uuidv4 } = require('uuid');

// Datos de prueba para personas
const personasPrueba = [
  {
    id: uuidv4(),
    nombre: 'Carlos Rodriguez',
    rol: 'Team Leader',
    email: 'carlos.rodriguez@empresa.com',
    habilidades: ['Liderazgo', 'Gesti√≥n de equipos', 'Scrum Master', 'Comunicaci√≥n']
  },
  {
    id: uuidv4(),
    nombre: 'Mar√≠a Gonz√°lez',
    rol: 'Business Analyst',
    email: 'maria.gonzalez@empresa.com',
    habilidades: ['An√°lisis de requisitos', 'Documentaci√≥n', 'UML', 'Casos de uso']
  },
  {
    id: uuidv4(),
    nombre: 'Juan P√©rez',
    rol: 'Developer',
    email: 'juan.perez@empresa.com',
    habilidades: ['JavaScript', 'Node.js', 'Angular', 'MySQL', 'Git']
  },
  {
    id: uuidv4(),
    nombre: 'Ana L√≥pez',
    rol: 'Tester',
    email: 'ana.lopez@empresa.com',
    habilidades: ['Testing manual', 'Automatizaci√≥n', 'Selenium', 'Casos de prueba']
  },
  {
    id: uuidv4(),
    nombre: 'Pedro Mart√≠nez',
    rol: 'Developer',
    email: 'pedro.martinez@empresa.com',
    habilidades: ['Python', 'Django', 'PostgreSQL', 'Docker', 'APIs REST']
  },
  {
    id: uuidv4(),
    nombre: 'Laura S√°nchez',
    rol: 'Team Leader',
    email: 'laura.sanchez@empresa.com',
    habilidades: ['Gesti√≥n de proyectos', 'Metodolog√≠as √°giles', 'Coaching', 'Planificaci√≥n']
  },
  {
    id: uuidv4(),
    nombre: 'Roberto Garc√≠a',
    rol: 'Business Analyst',
    email: 'roberto.garcia@empresa.com',
    habilidades: ['Modelado de procesos', 'BPMN', 'An√°lisis funcional', 'Stakeholder management']
  },
  {
    id: uuidv4(),
    nombre: 'Carmen Ruiz',
    rol: 'Tester',
    email: 'carmen.ruiz@empresa.com',
    habilidades: ['QA', 'Testing de performance', 'Cypress', 'Gesti√≥n de defectos']
  }
];

// Datos de prueba para categor√≠as de timebox
const categoriasPrueba = [
  {
    id: uuidv4(),
    nombre: 'Investigaci√≥n'
  },
  {
    id: uuidv4(),
    nombre: 'Construcci√≥n'
  },
  {
    id: uuidv4(),
    nombre: 'Evoluci√≥n'
  },
  {
    id: uuidv4(),
    nombre: 'Experimentaci√≥n'
  },
  {
    id: uuidv4(),
    nombre: 'Integraci√≥n'
  }
];

async function insertarPersonas() {
  console.log('üîÑ Insertando personas de prueba...');
  
  try {
    for (const persona of personasPrueba) {
      const sql = `
        INSERT INTO personas (id, nombre, rol, email, habilidades, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, NOW(), NOW())
        ON DUPLICATE KEY UPDATE
        nombre = VALUES(nombre),
        rol = VALUES(rol),
        email = VALUES(email),
        habilidades = VALUES(habilidades),
        updated_at = NOW()
      `;
      
      await executeQuery(sql, [
        persona.id,
        persona.nombre,
        persona.rol,
        persona.email,
        JSON.stringify(persona.habilidades)
      ]);
      
      console.log(`   ‚úÖ Insertada: ${persona.nombre} (${persona.rol})`);
    }
    
    console.log(`‚úÖ ${personasPrueba.length} personas insertadas correctamente\n`);
  } catch (error) {
    console.error('‚ùå Error insertando personas:', error);
    throw error;
  }
}

async function insertarCategorias() {
  console.log('üîÑ Insertando categor√≠as de timebox de prueba...');
  
  try {
    for (const categoria of categoriasPrueba) {
      const sql = `
        INSERT INTO timebox_categories (id, nombre, created_at, updated_at)
        VALUES (?, ?, NOW(), NOW())
        ON DUPLICATE KEY UPDATE
        nombre = VALUES(nombre),
        updated_at = NOW()
      `;
      
      await executeQuery(sql, [
        categoria.id,
        categoria.nombre
      ]);
      
      console.log(`   ‚úÖ Insertada: ${categoria.nombre}`);
    }
    
    console.log(`‚úÖ ${categoriasPrueba.length} categor√≠as insertadas correctamente\n`);
  } catch (error) {
    console.error('‚ùå Error insertando categor√≠as:', error);
    throw error;
  }
}

async function verificarTablas() {
  console.log('üîç Verificando existencia de tablas...');
  
  try {
    // Verificar tabla personas
    const personasCount = await executeQuery('SELECT COUNT(*) as total FROM personas');
    console.log(`   üìä Tabla personas: ${personasCount[0].total} registros existentes`);
    
    // Verificar tabla timebox_categories
    const categoriasCount = await executeQuery('SELECT COUNT(*) as total FROM timebox_categories');
    console.log(`   üìä Tabla timebox_categories: ${categoriasCount[0].total} registros existentes`);
    
    console.log('‚úÖ Verificaci√≥n de tablas completada\n');
  } catch (error) {
    console.error('‚ùå Error verificando tablas:', error);
    throw error;
  }
}

async function mostrarResumen() {
  console.log('üìã RESUMEN DE DATOS INSERTADOS:');
  console.log('================================');
  
  try {
    // Resumen de personas por rol
    const personasPorRol = await executeQuery(`
      SELECT rol, COUNT(*) as cantidad 
      FROM personas 
      WHERE rol IS NOT NULL 
      GROUP BY rol 
      ORDER BY cantidad DESC
    `);
    
    console.log('\nüë• PERSONAS POR ROL:');
    personasPorRol.forEach(row => {
      console.log(`   ‚Ä¢ ${row.rol}: ${row.cantidad} persona(s)`);
    });
    
    // Resumen de categor√≠as de timebox
    const categoriasTimebox = await executeQuery(`
      SELECT nombre 
      FROM timebox_categories 
      ORDER BY nombre ASC
    `);
    
    console.log('\nüìÇ CATEGOR√çAS DE TIMEBOX:');
    categoriasTimebox.forEach(row => {
      console.log(`   ‚Ä¢ ${row.nombre}`);
    });
    
    // Total general
    const totalPersonas = await executeQuery('SELECT COUNT(*) as total FROM personas');
    const totalCategorias = await executeQuery('SELECT COUNT(*) as total FROM timebox_categories');
    
    console.log('\nüìä TOTALES:');
    console.log(`   ‚Ä¢ Personas: ${totalPersonas[0].total}`);
    console.log(`   ‚Ä¢ Categor√≠as: ${totalCategorias[0].total}`);
    
  } catch (error) {
    console.error('‚ùå Error generando resumen:', error);
  }
}

async function main() {
  try {
    console.log('üöÄ INICIANDO INSERCI√ìN DE DATOS DE PRUEBA');
    console.log('==========================================\n');
    
    // Verificar conexi√≥n y tablas
    await verificarTablas();
    
    // Insertar datos
    await insertarPersonas();
    await insertarCategorias();
    
    // Mostrar resumen
    await mostrarResumen();
    
    console.log('\nüéâ ¬°PROCESO COMPLETADO EXITOSAMENTE!');
    console.log('=====================================');
    console.log('‚úÖ Todos los datos de prueba han sido insertados');
    console.log('‚úÖ Las APIs /api/personas y /api/categories est√°n listas para usar');
    
    process.exit(0);
    
  } catch (error) {
    console.error('\nüí• ERROR EN EL PROCESO:', error.message);
    console.error('‚ùå El proceso ha fallado. Revisa la configuraci√≥n de la base de datos.');
    process.exit(1);
  }
}

// Ejecutar el script
if (require.main === module) {
  main();
}

module.exports = {
  insertarPersonas,
  insertarCategorias,
  verificarTablas,
  mostrarResumen,
  personasPrueba,
  categoriasPrueba
};